data(galton)
library(reshape)
long <- melt(galton)
g<-ggplot(long, aes(x=value, fill=variable))
g
g<-g+geom_histogram(colour='black', binwidth=1)
g
g<-g+facet_grid(.~variable)
g
g<-g+geom_histogram(colour='black', binwidth=2)
g
g<-g+geom_histogram(colour='black', binwidth=.5)
g
g<-ggplot(long, aes(x=value, fill=variable))
g<-g+geom_histogram(colour='black', binwidth=.5)
g<-g+facet_grid(.~variable)
g
g<-ggplot(long, aes(x=value, fill=variable))
g<-g+geom_histogram(colour='black', binwidth=1)
g<-g+facet_grid(.~variable)
g
g<-ggplot(long, aes(x=value, fill=variable))
g<-g+geom_histogram(colour='black', binwidth=2)
g<-g+facet_grid(.~variable)
g
help(binwidth)
??binwidth
g<-ggplot(long, aes(x=value, y=variable))
g<-g+geom_point()
g
g<-ggplot(long, aes(x=value, y=variable))
g<-g+geom_line()
g
g<-ggplot(long, aes(x=value, fill=variable))
g<-g+geom_histogram(colour='black', binwidth=5)
g<-g+facet_grid(.~variable)
g
g<-ggplot(long, aes(x=value, fill=variable))
g<-g+geom_histogram(colour='black', binwidth=1)
g<-g+facet_grid(.~variable)
g
data <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes'), Count=c(2, 4, 6))
data
data$Disease=='Fever'
data[data$Disease=='Fever']
data[[data$Disease=='Fever']
]
data[[data$Disease=='Fever']]
data
data[,data$Disease=='Fever']
data[data$Disease=='Fever',]
data[data$Disease=='Fever',]
data[data$Disease=='Fever']
data[data$Disease=='Fever',]
data[[data$Disease=='Fever',]]
data[data$Disease=='Fever',]
data$Disease
data[data$Disease==]
data[data$Disease=='Fever',"Count"]
data[Disease=='Fever',"Count"]
data[data$Disease=='Fever',"Count"]
data <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes', 'Fever'),
Count=c(2, 4, 6, 8))
data[Disease=='Fever',"Count"]
data[data$Disease=='Fever',"Count"]
data$Disease
data$Disease=='Fever'
data$Disease
data[1][[1]]
data[1]
data[[1]
]
data[[1]]
data[1][[1]]
data[1][[2]]
data[[2]]
data[2]
data[Disease=='Fever',"Count"]
data[data$Disease=='Fever',"Count"]
data$Disease=='Fever'
data2012 <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes', 'Fever'),
Count=c(2, 4, 6, 8))
data2013 <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes', 'Fever'),
Count=c(4, 7, 9, 2))
data2014 <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes', 'Fever'),
Count=c(8, 12, 11, 21))
data2015 <- data.frame(Disease=c('Fever', 'Cancer', 'Diabetes', 'Fever'),
Count=c(12, 22, 14, 10)
)
data2012
data2013
data2014
data2015
DiseaseData <- list(data2012, data2013, data2014, data2015)
DiseaseData
DiseaseData <- list(2012=data2012, 2013=data2013, 2014=data2014, 2015=data2015)
DiseaseData <- list(Y2012=data2012, Y2013=data2013, Y2014=data2014, Y2015=data2015)
DiseaseData
DiseaseData[[DiseaseData$Y2013, "Count"]]
DiseaseData[[DiseaseData$Y2013, "Count"]]
DiseaseData[[DiseaseData$Y2013,]]
DiseaseData[DiseaseData$Y2013]
DiseaseData$Y2012
DiseaseData$Y2012[Disease=="Fever", "Count"]
DiseaseData$Y2012[["Fever",]]
DiseaseData$Y2012[["Fever"]]
DiseaseData$Y2012[["Fever"],]
DiseaseData$Y2012
DiseaseData$Y2012[]
DiseaseData$Y2012[DiseaseData$Y2012$Disease,"Count"]
DiseaseData$Y2012[DiseaseData$Y2012$Disease=="Fever","Count"]
library(UsingR)
data("father.son")
x<-father.son$fheight
y<-father.son$sheight
cor(x, y)
xn <- (father.son$fheight - mean(father.son$fheight))/sd(father.son$fheight)
yn <- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
cor(xn, yn)
cor(y, x)
R.version.string
packageVersion("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Regression Models"))
install_from_swirl("Regression Models")
swirl()
install.packages("devtools")
install_github("swirldev/swirl")
library(devtools)
install_github("swirldev/swirl")
swirl()
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
install.packages("curl")
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child, 4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regline, lwd=3, col='rd')
abline(regline, lwd=3, col='red')
library(ggplot2)
abline(regline, lwd=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
bye()
swirl()
library(swirl)
swirl()
bye
bye()
swirl()
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$resiudals, galton$parent)
library(UsingR)
data(galton)
cov(fit$resiudals, galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
eFit <- lm(accel~mag+dist, attenu)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
bye()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x-1)
fit
data(mtcars)
head(mtcars)
fit <- lm(mpg~wt, mtcars)
fit
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <- (x-mean(x))/sd(x)
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
w <- c(2, 1, 3, 1)
mean(w)
library(UsingR)
data("diamond")
library(ggplot2)
head(diamond)
g = ggplot(diamond, aes(x=carat, y=price))
g = g+xlab("Mass(carats)")
g = g+ylab("Price(Singapore $)")
g
g = g+geom_point(size = 6, color = "black", alpha = 0.2)
g
g = g+geom_point(size = 5, color = "blue", alpha = 0.2)
g
g = g+geom_smooth(method = 'lm', color = 'black')
g
??alpha
fit <- lm(price~carat, diamond)
coef(fit)
fit2 <- lm(price ~ (carat - mean(carat), diamond))
fit2 <- lm(price ~ (carat - mean(carat)), diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), diamond)
fit2
newData <- c(0.16, 0.24, 0.32, 0.48)
predict(fit2, newdata = data.fram(newData))
predict(fit2, newdata = data.frame(newData))
predict(fit2, newdata = data.frame(carat = newData))
predict(fit, newdata = data.frame(carat = newData))
dewData
newData
data.frame(carat = newData)
g = ggplot(diamond, aes(x=carat, y=price))
g = g+xlab("Mass(carats)")
g = g+ylab("Price(Singapore $)")
g = g+geom_point(size = 6, color = "black", alpha = 0.2)
g = g+geom_point(size = 5, color = "blue", alpha = 0.2)
g = g+geom_smooth(method = 'lm', color = 'black')
g
diamond$carat = diamond$carat - mean(diamond$carat)
g = ggplot(diamond, aes(x=carat, y=price))
g = g+xlab("Mass(carats)")
g = g+ylab("Price(Singapore $)")
g = g+geom_point(size = 6, color = "black", alpha = 0.2)
g = g+geom_point(size = 5, color = "blue", alpha = 0.2)
g = g+geom_smooth(method = 'lm', color = 'black')
g
data(diamond)
x<-diamond$carat
y<-diamond$price
fit <- lm(y~x)
resid(fit)
e=resid(fit)
e
swirl()
swirl()
install_from_swirl("R Programming")
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
bye()
swirl()
swirl()
x
3.5
expect_dice(pmf)
head(expect_dice())
info()
nxt()
expect_dice()
expect_dice(pmf)
expect_dice("pmf")
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
E((x_hi + x_lo)/2)
expect_dice((x_hi + x_lo)/2)
expect_dice((X_hi + x_lo)/2)
edh
.5(edh+edl)
'.5(edh+edl)'
.5*(edh+edl)
myfunc
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
swirl()
library(swirl)
swirl()
bye()
swirl()
bye()
swirl()
dice_sqr
ex2_fair <-  dice_sqr*dice_fair
ex2_fair <-  sum(dice_sqr*dice_fair)
ex2_fair -(3.5)^2
ex2_fair -3.5^2
(sum(dice_sqr*dice_high)-edh)
(sum(dice_sqr*dice_high)-edh^2)
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(1000), 1000),1, mean))
sd(apply(matrix(rnorm(10000),1000),1,mean))
a/sqrt(10)
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1, 10000, TRUE), 1000), 1, mean))
bye()
data(sleep)
head(sleep)
c <- (15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
c <- ('15.6', '16.2', 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
x <- c(15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
sd(x)
sample <- x
sample
data("sleep")
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
head(sleep, 20)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn
s
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
tci <- mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
tci
t.test(difference)
head(difference)
difference
t.test(difference)
tct <- t.test(difference)
tct
tct$conf
t.test(difference)
t.test(g2, g1, paired = TRUE)
help("relevel")
relevel(sleep$group, 2)
sleep$group
t.test(g2, g1, paired = TRUE)
t.test(g1, g2, paired = TRUE)
t.test(extra ~ group, paired = TRUE, data = sleep)
require(datasets)
data("swiss")
require(GGally)
require(ggplot2)
install.packages('GGally')
install.packages('GGaly')
install.packages('GGally')
packageVersion(ggplot2)
packageVersion('ggplot2')
library(GGally)
library(datasets)
data("swiss")
library(GGally)
library(ggplot2)
g=ggpairs(swiss, lower=list(continuous="smooth"), params=c(method='loess'))
g=ggpairs(swiss, lower=list(continuous="smooth"), params=c(method="loess"))
help("wrap", package="GGally")
library(datasets)
data("InsectSprays")
head(InsectSprays)
head(InsectSprays,20)
?InsectSprays
summary(lm(count~spray, data=InsectSprays))$Coeff
summary(lm(count~spray, data=InsectSprays))$coeff
head(swiss)
library(dplyr);
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
head(swiss)
g = ggplot(swiss, aes(x = Agriculture, y = Fertility, colour = factor(CatholicBin)))
g = g + geom_point(size = 6, colour = "black") + geom_point(size = 4)
g = g + xlab("% in Agriculture") + ylab("Fertility")
g
summary(lm(Fertility ~ Agriculture, data = swiss))$coef
fit = lm(Fertility ~ Agriculture, data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1
summary(lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss))$coef
fit = lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3], slope = coef(fit)[2], size = 2)
g1
coef(fit)[1]
coef(fit)[3]
coef(fit)[2]
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3],
slope = coef(fit)[2] + coef(fit)[4], size = 2)
g1
fit = lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss)
g1 = g
g1 = g1 + geom_abline(intercept = coef(fit)[1], slope = coef(fit)[2], size = 2)
g1 = g1 + geom_abline(intercept = coef(fit)[1] + coef(fit)[3],
slope = coef(fit)[2] + coef(fit)[4], size = 2)
g1
summary(lm(Fertility ~ Agriculture * factor(CatholicBin), data = swiss))$coef
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
?influence.measures
library(caret)
library(kernlab)
?ISLR
??ISRL
??ISLR
x<-c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
data(mtcars)
head(mtcars)
lm(mpg~wt, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- x-mean(x)
x
x <- x/sd(x)
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(mean())
mean(x)
(x-mean(x))^2
(x-0.8)^2
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
z<-x*w
mean(z)
weighted.mean??
??weighted.mean
s <- sum(x*w)
sw <- sum(w)
m <- s/sw
m
setwd('C:\\Users\\LXA8793\\Desktop\\Learning\\Data Science\\R\\RStudio WD\\Apps')
library(slidify)
library(slidifyLibraries)
author("PackageDemoSlidify")
slidify(index.Rmd)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(quantmod)
getSymbols("^DJI", from=Sys.Date()-90, to=Sys.Date())
chartSeries(DJI, theme=chartTheme("beige"))
slidify("index.Rmd")
slidify("index.Rmd")
shiny::runApp('C:/Users/LXA8793/Desktop/Learning/Data Science/R/RStudio WD/Apps')
runApp('C:/Users/LXA8793/Desktop/Learning/Data Science/R/RStudio WD/Apps')
library(rsconnect)
runApp('C:/Users/LXA8793/Desktop/Learning/Data Science/R/RStudio WD/Apps')
publish_github("Developing-Data-Products", username = "karthikkicks")
publish_github("index.Rmd", "Developing-Data-Products", username = "karthikkicks")
help("publish_github")
slidify('index.Rmd')
publish_github(repo = "Developing-Data-Products", username = "karthikkicks")
slidify("index.html")
slidify("index.Rmd")
